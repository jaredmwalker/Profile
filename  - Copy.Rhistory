library(nFactors)
library(randomNames)
library(ggplot2)
library(gplots)
library(readxl)
library(udpipe)
library(ids)
# Winners
# matrix <- matrix(ncol = 10, nrow = 10)
# rep_tweets <- sample(0:1, size = 20, replace = T, prob = c(.1, .9))
# dem_tweets <- sample(0:1, size = 20, replace = T, prob = c(.7, .1))
# rep_ids <- sample(10000:20000, size = 20, replace = T)
# dem_ids <- sample(10000:20000, size = 20, replace = T)
# colnames(matrix) <- c("race_id"	,"outcome",	"votes_received",	"share_of_vote",	"candidate_name",	"party",	"tweet","no_of_retweets",	"fb_post",	"no_of_shares")
t <- as.data.frame(matrix(nrow = 1000, ncol = 33, byrow = F))
colnames(t)<- colnames(df)
library(generator)
set.seed(666)
t <- t %>%
data.frame() %>%
mutate(lea_code = "C8",
lea_name = "Instititue of Higher Learning",
student_first_name = randomNames(1000, which.names = "first"),
student_last_name = randomNames(1000, which.names = "last"),
guardian_first_name = randomNames(1000, which.names = "first"),
guardian_last_name = randomNames(1000, which.names = "last"),
guardian_phone_number = r_phone_numbers(1000, use_hyphens = T,
use_parentheses = F,
use_spaces = F),
guardian_email_address = r_email_addresses(1000),
student_ssid = sample(157809:972836, 1000, replace = F),
student_mailing_zip_i_e_84114_or_841141234
= sample(80126:84025, 1000, replace = F),
student_mailing_state = "UT")
library(randNames)
address <- rand_names(1000, nationality = "US")
student_mailing_address_line_1 <- paste(address$location.street.number, " ", address$location.street.name)
t$student_mailing_address_line_1 <- student_mailing_address_line_1
t$sy21_22_student_eligibility_free_reduced_cep_provision_f_r_cep_prov <- rep(c("CEP", "P", "Prov", "F", "R"), times = 200)
t[400:600, ] <- NA
world.cities <- as.data.frame(maps::world.cities)
usa <- world.cities %>%
mutate(country = country.etc) %>%
select(-country.etc) %>%
filter(country == "USA")
cities <- usa %>%
rbind(usa[c(20, 100, 500), ]) %>%
select(name)
t <- t %>%
cbind(cities) %>%
mutate(student_mailing_city = name,
student_mailing_state = "UT") %>%
select(-name)
t[seq(50,900,40), seq(1:33)] <- NA
t[, "sy21_22_student_withdrawal_date_mm_dd_yyyy_if_available"] <- rep('2022-05-23', times = 50)
t[, "sy21_22_student_withdrawal_date_mm_dd_yyyy_if_available"] <- rep('2022-04-12', times = 50)
t[, "sy21_22_student_withdrawal_date_mm_dd_yyyy_if_available"] <- rep('2022-03-24', times = 50)
t[, "sy21_22_student_withdrawal_date_mm_dd_yyyy_if_available"] <- rep('2022-05-14', times = 50)
t[, "sy21_22_student_withdrawal_date_mm_dd_yyyy_if_available"] <- rep('2021-08-05', times = 50)
t[, "sy21_22_student_withdrawal_date_mm_dd_yyyy_if_available"] <- rep('2022-02-12', times = 50)
t[, "sy21_22_student_withdrawal_date_mm_dd_yyyy_if_available"] <- rep('2022-05-04', times = 50)
t[, "sy21_22_student_withdrawal_date_mm_dd_yyyy_if_available"] <- rep('2021-06-24', times = 50)
t[, "sy21_22_student_withdrawal_date_mm_dd_yyyy_if_available"] <- rep('2022-03-08', times = 50)
t[, "sy21_22_student_withdrawal_date_mm_dd_yyyy_if_available"] <- rep('2022-05-21', times = 50)
t[, "sy21_22_student_withdrawal_date_mm_dd_yyyy_if_available"] <- rep('2021-12-17', times = 50)
t[, "sy21_22_student_withdrawal_date_mm_dd_yyyy_if_available"] <- rep('2022-01-19', times = 50)
t$student_date_of_birth_mm_dd_yyyy <- sample(seq(as.Date('2009/12/10'), as.Date('2015/08/24'), by="day"), 1000)
dates1 <- as.data.frame(sample(seq(as.Date('2021/04/20'), as.Date('2022/07/24'), b="day"), 1000, replace = T))
colnames(dates1) <- "sy21_22_student_enrollment_date_mm_dd_yyyy"
t$sy21_22_student_enrollment_date_mm_dd_yyyy <- dates1$sy21_22_student_enrollment_date_mm_dd_yyyy
dates2 <- as.data.frame(sample(seq(as.Date('2021/04/20'), as.Date('2022/07/24'), b="day"), 1000, replace = T))
colnames(dates2) <- "sy21_22_student_free_reduced_price_eligibility_date_mm_dd_yyyy"
t$sy21_22_student_free_reduced_price_eligibility_date_mm_dd_yyyy<- dates2$sy21_22_student_free_reduced_price_eligibility_date_mm_dd_yyyy
View(t)
length(school_names)
school_names <- c("Pleasant Hill Grammar School","Enterprise School for Girls","Bear Mountain University","Great Oak School","Bear Valley School for Girls","Broad River Grammar School","Golden Oak University","Savanna Kindergarten","Village School for Boys","Spring Gardens Academy","Whitewater College","Faith Academy","Oak Ridge Conservatory","Pacific Grove Grammar School","Deer Valley Institute","Desert Winds School for Girls","Faraday School of Fine Arts","Summerfield University","Central Valley Elementary","Einstein Academy","Saint Helena High School","Enterprise School for Boys","Crystal River Secondary School","Pleasant Hill Grammar School","Trinity Institute")
t$school_name <- rep(school_names, 40)
school_numbers
create_unique_ids <- function(n, seed_no = 097654, char_len = 3){
set.seed(seed_no)
pool <- c(LETTERS, LETTERS, 0:9)
res <- character(n) # pre-allocating vector is much faster than growing it
for(i in seq(n)){
this_res <- paste0(sample(pool, char_len, replace = TRUE), collapse = "")
while(this_res %in% res){ # if there was a duplicate, redo
this_res <- paste0(sample(pool, char_len, replace = TRUE), collapse = "")
}
res[i] <- this_res
}
res
}
t <- t %>% arrange(school_name)
school_number <- create_unique_ids(25)
t$school_number <- rep(school_number, 40)
t[678:799, ] <- NA
library(openxlsx)
#Tester <- readxl::read_excel("H:/Documents/Tester.xlsx")
write.xlsx(t, "P:\\1_Internal\\Reports\\CNP (all programs)\\COVID-19\\PEBT SY2022\\R Code\\Tester.xlsx", overwrite = T)
write.xlsx(t, "H:/Documents/Tester.xlsx",, overwrite = T)
rm(list = ls())             # Clear Objects from Work Space
start.time <- Sys.time()    # Log start time.
options(max.print = 10000)    # Limit output.
options(scipen = 999)       # Prohibit use of scientific notation.
gc()                        # Free up memory.
library(janitor)
library(tidyverse)
lea_name <- "Tester"    # 1. Update LEA Name
user <- " JW "                    # 2. Username
destination <- "H:/Documents/"    # 3. File Destination
# 4. Import Column Names from Template
template.R3_S1 <- readxl::read_xlsx("P:\\1_Internal\\Reports\\CNP (all programs)\\COVID-19\\PEBT SY2022\\LEA Templates _SY22\\Round 3\\Non-Aspire LEAs\\LEA Student Information PEBT SY2022_R3.xlsx", sheet = "Template") %>% as.data.frame() %>% clean_names
template.S2 <- readxl::read_xlsx("P:\\1_Internal\\Reports\\CNP (all programs)\\COVID-19\\PEBT SY2022\\LEA Templates _SY22\\Summer Round 2\\Aspire LEAs\\LEA Student Information PEBT SY2022_Aspire_S2.xlsx", sheet = "Template") %>% as.data.frame() %>% clean_names
# 5. Import File to be Cleaned
df <- readxl::read_xlsx(r"(P:\1_Internal\Reports\CNP (all programs)\COVID-19\PEBT SY2022\R Code\Tester.xlsx)") %>% as.data.frame() %>% clean_names
dfexcel<- df
# 3. Compare Column Names
waldo::compare(names(template.R3_S1), names(df), max_diffs = 24)
View(compare_df_cols(template.S2, df))
lea_name <- "Tester"    # 1. Update LEA Name
user <- " JW "                    # 2. Username
destination <- "H:/Documents/"    # 3. File Destination
# 4. Import Column Names from Template
template.R3_S1 <- readxl::read_xlsx("P:\\1_Internal\\Reports\\CNP (all programs)\\COVID-19\\PEBT SY2022\\LEA Templates _SY22\\Round 3\\Non-Aspire LEAs\\LEA Student Information PEBT SY2022_R3.xlsx", sheet = "Template") %>% as.data.frame() %>% clean_names
template.S2 <- readxl::read_xlsx("P:\\1_Internal\\Reports\\CNP (all programs)\\COVID-19\\PEBT SY2022\\LEA Templates _SY22\\Summer Round 2\\Aspire LEAs\\LEA Student Information PEBT SY2022_Aspire_S2.xlsx", sheet = "Template") %>% as.data.frame() %>% clean_names
template.parent_app <- readxl::read_xlsx("P:\1_Internal\Reports\CNP (all programs)\COVID-19\PEBT SY2022\LEA Templates _SY22\Parent Application\LEA Student Information PEBT SY2022_Parent Application.xlsx") %>% as.data.frame() %>% clean_names
start.time <- Sys.time()   # Logs start time.
options(scipen=999) # Forbids scientific notation
options(max.print=1000)
library(tidyr)
library(lubridate) # %m+% function
library(janitor) # clean_names()
library(dplyr) # select() # filter()
library(openxlsx) # createWorkBook() # addWorksheet() # writeData() # saveWorkbook()
library(naniar) # replace_with_na()
library(readr) # read_csv()
library(data.table) # fifelse()
# Clatim Date Report
# Set Dates
curr_date  <- format(Sys.Date(), "%Y-%m-01")
curr_date <- as.Date(curr_date)
str(curr_date)
mmm_yyyy <- paste(month.abb[as.numeric(
format(curr_date %m+% months(-1), format="%m"))],
format(curr_date %m+% months(-1), format="%Y"))
d1145 <- read_csv(Data1145,
col_types = cols('Claim Date' = col_date(format = "%m/%d/%Y"),
'Claim Submit Date' = col_date(format = "%m/%d/%Y"),
'Approval Date' = col_date(format = "%m/%d/%Y"),
'Create Date' = col_date(format = "%m/%d/%Y"),
'Last Modified Date' = col_date(format = "%m/%d/%Y"))) %>%
clean_names %>%
select(-x15) %>%
mutate(due_date = claim_date + 90,
claim_submitted_on_time = fifelse(
due_date < claim_submit_date, "LATE", "On time"),
notes = fifelse(
claim_submitted_on_time == "LATE" & claim_status =="Approved",
paste0("Claim submitted ", claim_submit_date, ". Due date ",
due_date, ". Approved by the State Agency ", approval_date,
". Revision type = ", revision_type, "."),
as.character(NA)),
notes = fifelse(
claim_submitted_on_time == "LATE" & claim_status =="Pending Approval",
paste0("Claim submitted ", claim_submit_date, ". Due date ",
due_date, ". Pending approval. Revision type = ", revision_type, "."),
as.character(notes)))
odyssey_s2 <- r"(P:\1_Internal\Reports\CNP (all programs)\COVID-19\PEBT SY2022\SFA Submissions SY2022\Odyssey Charter\S2\PEBT2022_1C_Summer2.xlsx)"
length(count.fields(odyssey_s2,))
length(count.fields(odyssey_s2))
length(count.fields(odyssey_s2, sheet = 1))
length(count.fields(odyssey_s2), sheet = 1)
length(count.fields(odyssey_s2)1)
fread(odyssey_s2, skip=loopindex, nrows=chunksize)
install.packages("fread")
library(readxl)
read_excel_allsheets <- function(filename, tibble = FALSE) {
# I prefer straight data.frames
# but if you like tidyverse tibbles (the default with read_excel)
# then just pass tibble = TRUE
sheets <- readxl::excel_sheets(filename)
x <- lapply(sheets, function(X) readxl::read_excel(filename, sheet = X))
if(!tibble) x <- lapply(x, as.data.frame)
names(x) <- sheets
x
}
mysheets <- read_excel_allsheets("foo.xls")
mysheets <- read_excel_allsheets(odyssey_s2)
mysheets
sheets <- read_excel_allsheets(odyssey_s2)
names(sheets
names(sheets)
nrow(sheets[1])
nrow(sheets[2])
nrow(sheets[3])
length(count.fields(odyssey_s2))
length(count.fields(Template))
length(count.fields(sheets$Template))
size1000  <- sum(nchar(readLines(con = "dgrp2.tgeno", n = 1000)))
sizetotal <- file.size("dgrp2.tgeno")
size1000  <- sum(nchar(readLines(con = "dgrp2.tgeno", n = 1000)))
size1000  <- sum(nchar(readLines(con = "Template", n = 1000)))
size1000  <- sum(nchar(readLines(con = odyssey_s2, n = 1000)))
sum(nchar(readLines(con = odyssey_s2, n = 1000)))
sum(nchar(readLines(con = odyssey_s2)))
file.size("odyssey_s2")
sizetotal <- file.size("odyssey_s2")
sizetotal
length(sheets[1])
length(sheets[4])
str(sheets$Template))
str(sheets$Template)
nrow(sheets$Template)
names(sheets)
nrow(sheets[1])
nrow(sheets$"1")
nrow(sheets[[4]])
sheet <- read_excel_allsheets(odyssey_s2)
nrow(sheet[[5]])
nrow(sheet[[3]])
nrow(sheet[[2]])
nrow(sheet[[1]])
sizetotal <- file.size(odyssey_s2)
sizetotal
sizetotal <- file.size(sheet[[4]])
file.size(odyssey_s2)
file.size(odyssey_s$Template)
file.size(odyssey_s2$Template)
file.size(odyssey_s2[[Template]])
sizetotal
file.size(odyssey_s2[4])
file.size(odyssey_s2[[4]])
file.size(odyssey_s2[4])
count_lines = function(filepath, batch) {
con = file(filepath, "r")
n = 0
while ( TRUE ) {
lines = readLines(con, n = batch)
present = length(lines)
n = n + present
if ( present <  batch) {
break
}
close(con)
return(n)
}
count_lines(odyssey_s2)
count_lines(sheet[[4]])
count_lines(sheet[[4]], 10000)
count_lines(sheets[[4]], 10000)
count_lines(sheets[4, 10000)
count_lines(sheets[4], 10000)
file.size(sheets[[4]])
file.size(sheets[4])
nrow[[4]]
nrow(sheets[[4]])
read_excel_allsheets(odyssey_s2)
sheets <- read_excel_allsheets(odyssey_s2)
names(sheets)
length(sheets)
x <- sheets
for (i in length(x)) {
return max(nrow(x[[i]]))
for (i in length(x)) {
max(nrow(x[[i]]))
}
print(max(nrow(x[[i]])))
for (i in length(x)) {
which( i == max(nrow(x[[i]])))
}
sheet_n <- which(i == max(nrow(x[[i]])))
for (i in length(x)) {
sheet_n <- which(i == max(nrow(x[[i]])))
}
sheet_n
i == max(nrow(x[[i]])))
for (i in length(x)) {
i == max(nrow(x[[i]]))
}
for (i in length(x)) {
i = max(nrow(x[[i]]))
}
getSheetNbr <- function(x) {
max(nrow(x[[i]]))
}
getSheetNbr(sheets)
getSheetNbr <- function(x) {
max(nrow(x[i]))
}
getSheetNbr(sheets)
for (i in 1:length(x)) {
nrow(x[[i]])
}
for (i in 1:length(x)) {
print(nrow(x[[i]]))
}
for (i in length(x)) {
print(nrow(x[[i]]))
}
for (i in seq(length(x))) {
print(nrow(x[[i]]))
}
for (i in length(x)) {
print(nrow(x[i]))
}
print(nrow(x[[i]]))
for (i in 1:length(x)) {
print(nrow(x[i]))
}
for (i in 1:length(x)) {
print(nrow(x[[i]]))
}
str(sheets)
for (i in 1:length(x)) {
print(nrow(x[[i]]))
}
Position(max(nrow(x[[i]])))
for (i in 1:length(x)) {
Position(max(nrow(x[[i]])))
}
which(i == (max(nrow(x[[i]])))
}
for (i in 1:length(x)) {
which(i == (max(nrow(x[[i]]))))
}
print(which(i == (max(nrow(x[[i]])))))
which(i==max(length(x)))
list(x)
names(x)
which([i]==max(length(x)))
which.max(sheets)
which.max(sheets[1:n])
sheets[1:n]
sheets[[1:n]]
sheets[[n]]
sheets[n]
for (i in 1:length(x)) {
mac(x[i])
}
max(x[i])
for (i in 1:length(x)) {
max(nrow[i])
}
which.max(nrow(sheets[1:n]))
sheets[n]
getSheetNbr(sheets)
names(x)
nrow(sheets[[4]])
length(x)
1:length(x)
for (i in 1:length(x)) {
nrow(sheets[[i]])
}
nrow(sheets[[i]])
nrow(sheets[[1:i]])
nrow(sheets[[1:n]])
nrow(sheets[1:n])
sheets[1:n]
for (i in 1:length(x)) {
print(nrow(sheets[[i]]))
}
for (i in 1:length(x)) {
print(nrow(sheets[i]))
}
x[[c(1:length)]]
x[[c(1:length(x))]]
x[c(1:length(x))]
x[(1:length(x))]
sheets[n]
nrow(sheet[[1]])
nrow(sheet[[2]])
nrow(sheet[[3]])
which(x[n] == max(nrow(x[[n]])))
which(x == 4)
which(x[i] == 4)
which(x[[i] == 4)
which(x[[i]] == 4)
which(x[[i]] == 92)
x[(1:length(x))]
length(sheets[4])
nrow(sheets[[4]])
which(nrow(sheets[[]])==92)
which(nrow(sheets[i])==92)
which(nrow(sheets[i]==92))
# which function is used to get
# every index of given element
# [1] is used to get the first
# element of which() vector
which(v == 4)[1]
# vector created
v <- c(1, 2, 4, 1, 6, 2, 4, 4, 6)
# which function is used to get
# every index of given element
# [1] is used to get the first
# element of which() vector
which(v == 4)[1]
# which function is used to get
# every index of given element
# [1] is used to get the first
# element of which() vector
which(x == 4)[1]
# which function is used to get
# every index of given element
# [1] is used to get the first
# element of which() vector
which(x == 92)[1]
# which function is used to get
# every index of given element
# [1] is used to get the first
# element of which() vector
which(nrow(x) == 92)[1]
# which function is used to get
# every index of given element
# [1] is used to get the first
# element of which() vector
which(nrow(x[i]) == 92)[1]
lst= lst[order(sapply(x,nrow),decreasing = T)]
x= x[order(sapply(x,nrow),decreasing = T)]
x
x <- sheets
x[order(sapply(x,nrow),decreasing = T)]
x
length(x)
nrow_each <- vapply(x, nrow, numeric(1))
x[rev(order(nrow_each))]
nrow_each <- vapply(my.list, nrow, numeric(1))
nrow_each <- vapply(x, nrow, numeric(1))
nrow_each
max(nrow_each)
which.max(nrow_each)
which.max(nrow_each)[1]
as.numeric(which.max(nrow_each))
as.character(which.max(nrow_each))
names(which.max(nrow_each))
sapply(x, nrow)
vapply(x, nrow)
vapply(sheets, nrow, numeric(1))
as.numeric(which.max(sapply(x, nrow)))
names(which.max(sapply(x, nrow)))
library(tidyverse)
library(janitor)
library(readxl)
library(lubridate)
library(plyr)
library(stringr)
library(openxlsx)
library(writexl)
library(tibble)
library(dplyr)
#library(devtools)
library(naniar)
library(readr)
library(data.table)
#library(styler)
#library(lintr)
#library(profvis)
#usethis::use_tidy_style()
Temp_Rec.dirty1 <- read_excel(
"P:/1_Internal/Reports/CNP (all programs)/COVID-19/PEBT SY2022/R Code/Code/Alternative (dirty) Reconciliation Template.xlsx") %>%
clean_names
Temp_Rec.dirty2 <- read_excel(
"P:/1_Internal/Reports/CNP (all programs)/COVID-19/PEBT SY2022/R Code/Code/Alternative (dirty2) Reconciliation Template.xlsx") %>%
clean_names
#Tester <- read_excel("Tester.xlsx") %>% clean_names
Temp_R3_S1 <- read_xlsx(
"P:\\1_Internal\\Reports\\CNP (all programs)\\COVID-19\\PEBT SY2022\\LEA Templates _SY22\\Round 3\\Non-Aspire LEAs\\LEA Student Information PEBT SY2022_R3.xlsx",
sheet = "Template") %>% clean_names
Temp_S2 <- read_xlsx(
"P:\\1_Internal\\Reports\\CNP (all programs)\\COVID-19\\PEBT SY2022\\LEA Templates _SY22\\Summer Round 2\\Aspire LEAs\\LEA Student Information PEBT SY2022_Aspire_S2.xlsx",
sheet = "Template") %>% clean_names
#S2_non_aspire <- read_xlsx("P:\\1_Internal\\Reports\\CNP (all programs)\\COVID-19\\PEBT SY2022\\LEA Templates _SY22\\Summer Round 2\\Non Aspire LEAs\\LEA Student Information PEBT SY2022_S2.xlsx",
#sheet = "Template")  %>% clean_names
Temp_ParApp <- read_xlsx(r"(P:\1_Internal\Reports\CNP (all programs)\COVID-19\PEBT SY2022\LEA Templates _SY22\Round 4\LEA Student Information PEBT SY2022_Parent Application.xlsx)", sheet = "Template") %>% clean_names
Temp.Rec.clean2<- read.xlsx(r"(P:\1_Internal\Reports\CNP (all programs)\COVID-19\PEBT SY2022\LEA Templates _SY22\Round 4\LEA Student Information PEBT SY2022_Reconsideration (clean2).xlsx)",
sheet = "Template") %>% clean_names
Temp_Rec.clean <- read.xlsx(r"(P:\1_Internal\Reports\CNP (all programs)\COVID-19\PEBT SY2022\LEA Templates _SY22\Round 4\LEA Student Information PEBT SY2022_Reconsideration.xlsx)",
sheet = "Template") %>% clean_names
Temp_R <- read_xlsx(
"P:\\1_Internal\\Reports\\CNP (all programs)\\COVID-19\\PEBT SY2022\\LEA Templates _SY22\\R Template.xlsx") %>%
clean_names
CEP <- read.xlsx(
"P:\\1_Internal\\Reports\\CNP (all programs)\\COVID-19\\PEBT SY2022\\LEA Templates _SY22\\Summer Round 2\\Aspire LEAs\\List of CEP & Provision 2 Schools.xlsx") %>%
clean_names
Tracker <- read_excel(
"H:\\Documents\\1- P-EBT 2022 Tracker.xlsx",
sheet = "Round 4_Parent App") %>% clean_names
url <- 'https://usbe.sharepoint.com/:x:/r/sites/CNPSchoolPrograms/_layouts/15/doc2.aspx?sourcedoc=%7B89B662F3-2254-4FE8-A3A7-0BDBBD46AC43%7D&file=1-%20P-EBT%202022%20Tracker.xlsx&action=default&mobileredirect=true&cid=d8255a9f-57be-4ecd-858b-b7c391a1f114'
GET(url, write_disk("excel.xlsx", overwrite=TRUE))
library(httr)
url <- 'https://usbe.sharepoint.com/:x:/r/sites/CNPSchoolPrograms/_layouts/15/doc2.aspx?sourcedoc=%7B89B662F3-2254-4FE8-A3A7-0BDBBD46AC43%7D&file=1-%20P-EBT%202022%20Tracker.xlsx&action=default&mobileredirect=true&cid=d8255a9f-57be-4ecd-858b-b7c391a1f114'
GET(url, write_disk("excel.xlsx", overwrite=TRUE))
frmData <- read_excel("excel.xlsx", sheetIndex="Summer Round 2", header=TRUE)
frmData <- read_excel("excel.xlsx", sheet ="Summer Round 2", header=TRUE)
frmData <- read_excel("excel.xlsx", sheet ="Summer Round 2")
install.packages("AzureGraph
")
devtools::install_github("Azure/AzureGraph").
devtools::install_github("Azure/AzureGraph")
CLIMICROSOFT365_AADAPPID
library(AzureGraph)
CLIMICROSOFT365_AADAPPID
()
create_graph_login()
CLIMICROSOFT365_AADAPPID
# organisational tenant -> business OneDrive for a user
gr2 <- AzureGraph::get_graph_login("Utah State Board of Education", app="Microsoft")
# organisational tenant -> business OneDrive for a user
gr2 <- AzureGraph::get_graph_login("Utah State Board of Education", app="Microsoft 365")
# organisational tenant -> business OneDrive for a user
gr2 <- AzureGraph::get_graph_login("USBE", app="Microsoft 365")
myuser <- gr2$get_user("Jared.Walker@mschools.utah.gov")
GET(url, write_disk("excel.xlsx", overwrite=TRUE))
t <- read_excel(unz("excel.xlsx"), sheet ="Summer Round 2")
